# =============================================================================
# Coratrix 3.1: Modular Quantum Computing SDK - Dependencies
# =============================================================================
# 
# This file contains all dependencies for Coratrix 3.1, organized by category.
# For detailed setup instructions, see docs/INSTALLATION.md
#
# Python Version: 3.8+ (recommended: 3.10+)
# Platform Support: Linux, macOS, Windows
# GPU Support: CUDA 11.0+ (optional)
#
# =============================================================================

# =============================================================================
# CORE DEPENDENCIES (Required)
# =============================================================================
# These are essential for basic functionality

# Numerical computing and linear algebra
numpy>=1.21.0,<2.0.0              # Core numerical operations
scipy>=1.7.0,<2.0.0               # Scientific computing and optimization

# Visualization and plotting
matplotlib>=3.5.0,<4.0.0          # Basic plotting and visualization
plotly>=5.0.0,<6.0.0              # Interactive quantum circuit visualization
seaborn>=0.11.0,<1.0.0            # Statistical data visualization

# System monitoring and performance
psutil>=5.8.0,<6.0.0              # System resource monitoring

# =============================================================================
# GPU ACCELERATION (Optional but Recommended)
# =============================================================================
# CuPy provides GPU acceleration for large quantum systems
# Requires CUDA 11.0+ and compatible GPU

# GPU acceleration (excludes ARM64 platforms like Apple Silicon)
cupy>=10.0.0,<13.0.0; platform_machine != "arm64"  # GPU-accelerated NumPy

# =============================================================================
# QUANTUM FRAMEWORK INTEGRATION (Optional)
# =============================================================================
# Integration with popular quantum computing frameworks

# IBM Qiskit integration
qiskit>=0.45.0,<1.0.0             # IBM Quantum framework
qiskit-aer>=0.12.0,<1.0.0         # Qiskit Aer simulator

# Xanadu PennyLane integration  
pennylane>=0.32.0,<1.0.0          # Xanadu quantum machine learning
pennylane-lightning>=0.32.0,<1.0.0  # PennyLane Lightning simulator

# Google Cirq integration (optional)
cirq>=1.0.0,<2.0.0                # Google quantum framework

# =============================================================================
# OPTIMIZATION AND MACHINE LEARNING (Optional)
# =============================================================================
# Advanced optimization and ML capabilities

# Optimization algorithms
scikit-optimize>=0.9.0,<1.0.0     # Bayesian optimization
optuna>=3.0.0,<4.0.0              # Hyperparameter optimization

# Machine learning (for quantum ML applications)
scikit-learn>=1.0.0,<2.0.0       # Classical ML algorithms
torch>=1.12.0,<3.0.0              # PyTorch for quantum ML
tensorflow>=2.8.0,<3.0.0          # TensorFlow for quantum ML

# =============================================================================
# DEVELOPMENT AND TESTING (Development Only)
# =============================================================================
# These are only needed for development and testing

# Testing framework
pytest>=6.0.0,<8.0.0              # Testing framework
pytest-cov>=2.0.0,<5.0.0          # Coverage testing
pytest-xdist>=2.0.0,<4.0.0        # Parallel test execution
hypothesis>=6.0.0,<7.0.0          # Property-based testing

# Code quality and formatting
black>=22.0.0,<24.0.0             # Code formatting
flake8>=4.0.0,<7.0.0              # Linting
mypy>=0.950,<2.0.0                # Type checking
isort>=5.0.0,<6.0.0                # Import sorting

# Pre-commit hooks
pre-commit>=2.0.0,<4.0.0           # Git hooks for code quality

# =============================================================================
# DOCUMENTATION (Development Only)
# =============================================================================
# Tools for building documentation

# Sphinx documentation
sphinx>=4.0.0,<7.0.0              # Documentation generator
sphinx-rtd-theme>=1.0.0,<2.0.0    # Read the Docs theme
sphinx-autodoc-typehints>=1.12.0,<2.0.0  # Type hint documentation

# Documentation extensions
myst-parser>=0.18.0,<2.0.0        # Markdown support
sphinx-copybutton>=0.5.0,<1.0.0   # Copy code blocks
sphinx-tabs>=3.0.0,<4.0.0         # Tabbed content

# =============================================================================
# PERFORMANCE AND BENCHMARKING (Optional)
# =============================================================================
# Tools for performance analysis and benchmarking

# Profiling and benchmarking
memory-profiler>=0.60.0,<1.0.0    # Memory usage profiling
line-profiler>=3.0.0,<5.0.0       # Line-by-line profiling
py-spy>=0.3.0,<1.0.0              # Sampling profiler

# Benchmarking
pytest-benchmark>=3.0.0,<5.0.0    # Performance benchmarking
asv>=0.4.0,<1.0.0                 # Airspeed Velocity benchmarking

# =============================================================================
# CLOUD AND DISTRIBUTED COMPUTING (Optional)
# =============================================================================
# For distributed and cloud-based quantum computing

# Cloud computing
boto3>=1.20.0,<2.0.0              # AWS SDK
azure-storage-blob>=12.0.0,<13.0.0  # Azure storage
google-cloud-storage>=2.0.0,<3.0.0  # Google Cloud storage

# Distributed computing
dask>=2022.0.0,<2024.0.0          # Parallel computing
ray>=2.0.0,<3.0.0                 # Distributed computing

# =============================================================================
# PLATFORM-SPECIFIC DEPENDENCIES
# =============================================================================

# Windows-specific
pywin32>=300; sys_platform == "win32"  # Windows API access

# macOS-specific  
pyobjc>=8.0; sys_platform == "darwin"  # macOS integration

# =============================================================================
# INSTALLATION NOTES
# =============================================================================
#
# 1. Basic Installation (CPU only):
#    pip install -r requirements.txt
#
# 2. GPU Installation (with CUDA):
#    pip install cupy-cuda11x  # For CUDA 11.x
#    pip install cupy-cuda12x  # For CUDA 12.x
#
# 3. Development Installation:
#    pip install -r requirements.txt
#    pip install -r requirements-dev.txt
#
# 4. Minimal Installation (core only):
#    pip install numpy scipy matplotlib psutil
#
# 5. Full Installation (all features):
#    pip install -r requirements.txt
#    pip install -r requirements-optional.txt
#
# For detailed setup instructions, see docs/INSTALLATION.md
# For troubleshooting, see docs/TROUBLESHOOTING.md
